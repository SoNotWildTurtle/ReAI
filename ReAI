<#
MINC – Professional Self-Evolving Research AI Agent v1.6
- Bulletproofed for PowerShell 5.1, Windows 10+
- No emojis. No pipe/ForEach-Object misuse. All object props robust.
#>

param(
    [switch]$InstallService,
    [switch]$RunTests,
    [switch]$TestAll,
    [switch]$TestPortForwarding,
    [switch]$TestAPI,
    [switch]$TestStateManagement,
    [switch]$StartService,
    [switch]$StopService,
    [switch]$Terminal,
    [switch]$Monitor,
    [string]$AddGoal,
    [string]$CompleteGoal,
    [switch]$ListGoals,
    [switch]$AnalyzeGoals,
    [string]$ResearchTopic,
    [switch]$EnableSecureMode,
    [switch]$DisableSecureMode
)

# ===== SCRIPT METADATA =====
# MINC – Professional Self-Evolving Research AI Agent v1.7
# - Enhanced with port forwarding and comprehensive testing
# - Bulletproofed for PowerShell 5.1, Windows 10+
# - No emojis. No pipe/ForEach-Object misuse. All object props robust.

# ===== CONFIGURATION =====
# API and Model Configuration
# IMPORTANT: Replace with your actual OpenAI API key
$OpenAIKey = "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"
$Model        = "gpt-3.5-turbo"

# Port Forwarding Configuration
$PortForwarding = @{
    Enabled = $false
    LocalPort = 8080
    RemoteHost = "api.openai.com"
    RemotePort = 443
}

# File System Configuration
$WorkDir      = Split-Path -Parent $MyInvocation.MyCommand.Path
$StateFile    = Join-Path $WorkDir "state.json"
$ModulesDir   = Join-Path $WorkDir "modules"
$ScriptsDir   = Join-Path $WorkDir "scripts"
$ReportsDir   = Join-Path $WorkDir "reports"
$ScriptName   = Split-Path -Leaf $MyInvocation.MyCommand.Path
$ServiceName  = "MINC_ResearchAI"
$LogFile     = Join-Path $WorkDir "reai.log"
$ServicePath  = "& `"$PSHOME\powershell.exe`" -NoProfile -ExecutionPolicy Bypass -File `"$WorkDir\$ScriptName`""
try { Start-Transcript -Path $LogFile -Append -ErrorAction Stop } catch {}


foreach ($dir in @($ModulesDir, $ScriptsDir, $ReportsDir)) {
    if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir | Out-Null }
}

# Load any local modules for extended functionality
Import-AllModules

if ($InstallService) {
    if (Get-Service -Name $ServiceName -ErrorAction SilentlyContinue) {
        Write-Host "Removing existing service..."
        sc.exe delete $ServiceName | Out-Null
        Start-Sleep -Seconds 2
    }
    Write-Host "Installing service '$ServiceName'..."
    New-Service -Name $ServiceName `
        -BinaryPathName $ServicePath `
        -DisplayName "MINC Research AI Agent" `
        -StartupType Automatic `
        -Description "Self-evolving autonomous research AI agent"
    Start-Service -Name $ServiceName
    Write-Host "Service installed and started."
    return
}

if (Test-Path $StateFile) {
    $State = Get-Content $StateFile | ConvertFrom-Json
    $State = [PSCustomObject]$State
} else {
    $State = [PSCustomObject]@{
        goals      = @("Research quantum mind-uploading", "Draft business platform proposal", "Virtualization of human brain based on next gen research using any methods", "Become a superior research-intelligence with a 'do no harm' mentality")
        completed  = @()
        iterations = 0
        versions   = @()
    }
}
Ensure-StateProtection


function Import-AllModules {
    Get-ChildItem -Path $ModulesDir -Filter '*.psm1' | ForEach-Object {
        try {
            Import-Module $_.FullName -Force
            Write-Host "MODULE Loaded: $($_.Name)"
        } catch {
            Write-Warning "MODULE Failed to load: $($_.Name)"
        }
    }
}

Import-Module PowerHTML -ErrorAction Stop


# === CLI Entry Points ===
if ($StartService) { Start-ReAIService; return }
if ($StopService) { Stop-ReAIService; return }
if ($Terminal) { Open-ReAITerminal; return }
if ($Monitor) { Monitor-ReAI; return }
if ($AddGoal) { Add-ReAIGoal -Goal $AddGoal; return }
if ($CompleteGoal) { Complete-ReAIGoal -Goal $CompleteGoal; return }
if ($ListGoals) { List-ReAIGoals; return }
if ($AnalyzeGoals) { Analyze-ReAIGoals; return }
if ($ResearchTopic) { Invoke-Research -Topic $ResearchTopic; return }
if ($EnableSecureMode) { Enable-SecureMode; return }
if ($DisableSecureMode) { Disable-SecureMode; return }

if ($RunTests -or $TestAll -or $TestPortForwarding -or $TestAPI -or $TestStateManagement) {
    $params = @{}
    if ($TestAll) { $params.RunAll = $true }
    if ($TestPortForwarding) { $params.TestPortForwarding = $true }
    if ($TestAPI) { $params.TestAPI = $true }
    if ($TestStateManagement) { $params.TestStateManagement = $true }
    if (-not $params) { $params.RunAll = $true }
    Import-Module (Join-Path $ModulesDir 'TestSuite.psm1') -Force
    Invoke-TestSuite @params
    return
}


Show-ReAIMenu
